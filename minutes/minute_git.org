# -*- mode: org; coding: utf-8; -*-
#+OPTIONS: \n:t
#+OPTIONS: ^:nil
#+TITLE:	GIT
#+AUTHOR: Liu Hui
#+EMAIL: hliu@arcsoft.com
#+LATEX_CLASS: cn-article
#+LATEX_CLASS_OPTIONS: [9pt,a4paper]
#+LATEX_HEADER: \usepackage{geometry}
#+LATEX_HEADER: \geometry{top=2.54cm, bottom=2.54cm, left=3.17cm, right=3.17cm}
#+latex_header: \makeatletter
#+latex_header: \renewcommand{\@maketitle}{
#+latex_header: \newpage
#+latex_header: \begin{center}%
#+latex_header: {\Huge\bfseries \@title \par}%
#+latex_header: \end{center}%
#+latex_header: \par}
#+latex_header: \makeatother

#+LATEX: \newpage

* 简介
集中式版本系统
如 Subversion（SVN） 、 Concurrent Versions System（CVS）
C/S 模式

分布式版本系统
如 GIT 、 Mercurial
Distributed 模式或者 Peer-Peer 模式

快照（snapshot）与差异集（changeset）

SHA-1 对象标识

* 对象
四种对象类型
blob
tree
commit
tag

* 结构
远程仓库
本地仓库
暂存区（Staged，Index）
工作目录
裸仓库
git 目录

* 基本操作

创建本地仓库
#+BEGIN_SRC shell
$ git init
#+END_SRC

克隆远程仓库
#+BEGIN_SRC shell
$ git clone
#+END_SRC

新建分支
#+BEGIN_SRC shell
$ git branch
#+END_SRC

检出分支
#+BEGIN_SRC shell
$ git checkout
#+END_SRC

将修改添加到本地暂存区（ Staged ）
#+BEGIN_SRC shell
$ git add
#+END_SRC

提交本地缓存区至本地仓库
#+BEGIN_SRC shell
$ git commit
#+END_SRC

同步远程仓库到本地仓库，合并到工作目录。
#+BEGIN_SRC shell
$ git pull
#+END_SRC

同步远程仓库到本地仓库，不合并到工作目录。
#+BEGIN_SRC shell
$ git fetch
#+END_SRC

同步本地仓库至远程仓库
#+BEGIN_SRC shell
$ git push
#+END_SRC

* 分支、分支、分支
* 合并（merge）与衍合（rebase）
* 裸 （ bare ） 仓库和镜像 （ mirror ）
** 裸仓库
#+BEGIN_SRC sh
  $ git clone --bare ssh://gituser@xifan.biz:1122/opt/git/things.git
#+END_SRC
区别于一般的仓库建立仓库目录，并将管理文件置于 =.git= 子目录下，裸仓库将仓库目录直接作为 =$GIT_DIR= ，
克隆完成后，也不 checkout 分支，因为没有工作树（ working tree ）目录。

** 镜像
#+BEGIN_SRC sh
  $ git clone --mirror ssh://gituser@xifan.biz:1122/opt/git/things.git
#+END_SRC

** 差别
http://stackoverflow.com/questions/3959924/whats-the-difference-between-git-clone-mirror-and-git-clone-bare
https://help.github.com/articles/duplicating-a-repository/#mirroring-a-repository
* 协议
** 本地协议
** SSH
** Git
** HTTP/HTTPS
* HEAD
