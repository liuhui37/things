# -*- mode: org; coding: utf-8; -*-
#+OPTIONS: \n:t
#+OPTIONS: ^:nil
#+TITLE:	Emacs 之 Icicles
#+AUTHOR: Liu Hui
#+EMAIL: hliu@arcsoft.com
#+LATEX_CLASS: cn-article
#+LATEX_CLASS_OPTIONS: [9pt,a4paper]
#+LATEX_HEADER: \usepackage{geometry}
#+LATEX_HEADER: \geometry{top=2.54cm, bottom=2.54cm, left=3.17cm, right=3.17cm}
#+latex_header: \makeatletter
#+latex_header: \renewcommand{\@maketitle}{
#+latex_header: \newpage
#+latex_header: \begin{center}%
#+latex_header: {\Huge\bfseries \@title \par}%
#+latex_header: \end{center}%
#+latex_header: \par}
#+latex_header: \makeatother

#+LATEX: \newpage

Icicles 是一个 Emacs 使用的库，目的在于增强 Emacs 中 minibuffer 的补全功能。它的补全行为
不同于 Ido 或者 IswitchB 。
如果希望 Icicles 的行为与 Ido 兼容，可以打开 `icicle-ido-like-mode` 这个 minor
mode （ Emacs 21 开始）。开启这个模式会将
`icicle-show-Completions-initially-flag` 和
`icicle-top-level-when-sole-completion-flag` 设置为 `t` 。
如果你只是希望在查找缓冲区和文件的时候兼容 Ido ，那么将
`icicle-buffers-ido-like-flag` 和 `icicle-files-ido-like-flag` 设置为非 `nil` 。

* 使用
#+BEGIN_SRC elisp
;; Load Icicles package
(require 'icicles)

(icy-mode 1)
#+END_SRC

可以在使用中，可以通过 `M-x icy-mode` 来开关 Icicles mode 。

* 补全规则
补全功能中有哪些可能的候选项取决于补全方式。
原生 Emacs 的 `Basic` 补全规则，补全候选项是前缀与输入相匹配的哪些项。比如，输入
`M-x region TAB` ，将显示所有以 `region` 开头的命令。原生 Emacs 在版本 23 之前，
只有严格的前缀补全规则。版本 23 开始，使用了多种补全规则，你可以通过
`completion-styles` 参数来指定使用哪些规则，然而，很多 Emacs 命令会忽略这个参数。
对于 Icicles ，可以在补全过程中动态修改补全规则 --- 使用 `C-(` 或者 `M-(` 。基本
的前缀补全是其中一种，另外还可以选择 `regexp` 匹配（包括子串匹配）或者其他几种
`fuzzy` （模糊）匹配。 Icicles 将补全规则分为两组， `TAB` 补全使用第一组（叫做松
散的 `prefix` 前缀补全）中的当前规则，`S-TAB` 补全使用第二组（叫做 `apropos` 合
适补全）中的当前规则。

* 键补全（ key completion ）和菜单补全（ menu completion ）
在原生 Emacs 中，可以使用 `C-h k` ， `C-h b` ， `C-h f` 和 `C-h m` 获得键盘绑定
的信息。 Icicles 提供一个更快捷的方法取得这些信息，在顶层 Emacs 环境中使用
`S-TAB` ，当前上下文可用的键盘绑定都将显示在 `*Completions*` 缓冲区，你可以在缓
冲区继续键入来筛选结果。

这个特性之所以叫键补全是因为，你可以在快捷键输入的过程中使用 `S-TAB` 键来提供跟
你已输入键序列匹配的可选项。比如，你输入 `C-x r` 后再输入 `S-TAB` ，所有当前可用
的以 `C-x r` 开头的快捷键都将显示在 `*Completions*` 缓冲区（只显示除已输入部分后
剩下的键序列，同时有关于这个快捷键功能简单的说明）。
键补全也指菜单补全，用户可以通过 `S-<F10>` 启动菜单补全，菜单项显示在
`*Completions*` 缓冲区。

* 补全候选项
补全操作中，所有可能的补全项会显示在 `*Completions*` 缓冲区。当前焦点下补全项的
信息会自动显示在 mode line 里，也可以通过 `C-M-RET` 或者 `C-M-mouse-2` 得到更详
细的信息，比如，函数名称候选项的详细信息就是该函数的 doc string 说明，等于 `C-h
f`。
另外，可以通过`C-mouse-3` 来弹出该项的上下文菜单。

* 递增式补全（ Progressive Completion ）
递增式补全指的是补全过程中输入额外条件来限缩补全候选项的范围。各条件之间是类似逻
辑操作中与（ and ）的关系，最终列出的补全候选是满足所有条件的项目。递增式补全的
快捷键是 `M-*` （ icicle-narrow-candidates ）。

比如希望匹配一个命令，命令中以 delete 为前缀而且包含 char ，那么我们键入 `M-x
delete` 和 `TAB` ，表示第一个条件是以 delete 开头（ `TAB` 默认是前缀补全规则），
然后输入 `M-*` ，再输入 `char` 和 `S-TAB` ，表示第二个条件是命令中包含
`char` （ `S-TAB` 默认是 apropos 补全），所有满足这两个条件的命令都将列在
`*Completions*` 缓冲区。

* 递减式补全（ Regressive Completion ）
递减式补全指的是补全过程中输入额外条件来扩大补全候选项的范围。各条件之间是类似逻
辑操作中或（ or ）的关系，最终列出的补全候选是满足任一条件的项目。递减式补全的
快捷键是 `M-+` （ icicle-widen-candidates ）。

比如希望匹配一个命令，命令中以 delete 或 char 为前缀，那么我们输入 `M-x delete`
和 `TAB` ，表示第一个条件是以 delete 开头，然后输入 `M-+` 和 `char` ，然后 `TAB`
，表示第二个条件是以 char 开头。任何满足其中一个条件的命令都将列在
`*Completions*` 缓冲区。
