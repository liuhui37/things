# -*- mode: org; coding: utf-8; -*-
#+OPTIONS: \n:t
#+OPTIONS: ^:{}
#+TITLE:	SpanDSP codes study
#+AUTHOR: Liu Hui
#+EMAIL: liuhui.hz@gmail.com
#+LATEX_CLASS: cn-article
#+LATEX_CLASS_OPTIONS: [9pt,a4paper]
#+LATEX_HEADER: \usepackage{geometry}
#+LATEX_HEADER: \geometry{top=2.54cm, bottom=2.54cm, left=3.17cm, right=3.17cm}
#+latex_header: \makeatletter
#+latex_header: \renewcommand{\@maketitle}{
#+latex_header: \newpage
#+latex_header: \begin{center}%
#+latex_header: {\Huge\bfseries \@title \par}%
#+latex_header: \end{center}%
#+latex_header: \par}
#+latex_header: \makeatother

#+LATEX: \newpage

Based on spandsp 0.0.6

* 源码分析
** src/dds_int.c

首先，让我们了解以下事实：
移位操作本质上是乘除操作。左移相当于乘 2 ，右移相当于除 2 。

First, let's clarify a fact, shift operation essentially is multiplication or division.
Left shift equals to multiply by two, right shift equals to divide by two.

dds_int
S16 音频数据格式，信号幅度值域 [ -32767, 32767 ] 。
#+BEGIN_SRC c -n
  /* In a A-law or u-law channel, a fairly coarse step sine table is adequate to keep the spectral
     mess due to the DDS at a similar level to the spectral mess due to the A-law or u-law
     compression. */
  #define SLENK       8
  #define DDS_STEPS   (1 << SLENK)
  #define DDS_SHIFT   (32 - 2 - SLENK)

  /* This is a simple set of direct digital synthesis (DDS) functions to generate sine
     waves. This version uses a 256 entry sin/cos table to cover one quadrant. */

  static const int16_t sine_table[DDS_STEPS + 1] =
  {
           0,
         201,
         402,
  ...
       32765,
       32766,
       32767
  };

#+END_SRC

- sine_table
  为了节省计算时间，提高效率，以空间换时间，使用预计算的正弦值表数组。
  这个数组只保存第一象限的值（ 0 ~ PI/2 ）。其它象限的值可以推导得出。

- SLENK
  正弦值表数组大小的二进制位数。

- DDS_STEPS
  正弦值表数组大小。

- DDS_SHIFT
  32 位值右移移位的位数。保留 SLENK 位对应正弦值表数组精度，保留 2 位对应四个象限。

#+BEGIN_SRC c -n
  SPAN_DECLARE(int32_t) dds_phase_rate(float frequency)
  {
      return (int32_t) (frequency*65536.0f*65536.0f/SAMPLE_RATE);
  }
  /*- End of function --------------------------------------------------------*/

  SPAN_DECLARE(float) dds_frequency(int32_t phase_rate)
  {
      return (float) phase_rate*(float) SAMPLE_RATE/(65536.0f*65536.0f);
  }
  /*- End of function --------------------------------------------------------*/

#+END_SRC

- dds_phase_rate
  给定频率下，计算采样点间的相位差，以波形为单位，乘以 65536.0 * 65536.0 ，是为了在整型表示下保持精度。
  整型操作比浮点操作效率高。能否直接用 65536 * 65536 呢？

- dds_frequency
  给定采样点相位差，计算所需的频率。

#+BEGIN_SRC c -n
  SPAN_DECLARE(int16_t) dds_scaling_dbm0(float level)
  {
      return (int16_t) (powf(10.0f, (level - DBM0_MAX_SINE_POWER)/20.0f)*32767.0f);
  }
  /*- End of function --------------------------------------------------------*/

  SPAN_DECLARE(int16_t) dds_scaling_dbov(float level)
  {
      return (int16_t) (powf(10.0f, (level - DBOV_MAX_SINE_POWER)/20.0f)*32767.0f);
  }
  /*- End of function --------------------------------------------------------*/
#+END_SRC

计算给定分贝水平值对应的信号放大倍数。

#+BEGIN_SRC c -n
  SPAN_DECLARE(int16_t) dds_lookup(uint32_t phase)
  {
      uint32_t step;
      int16_t amp;

      phase >>= DDS_SHIFT;
      step = phase & (DDS_STEPS - 1);
      if ((phase & DDS_STEPS))
          step = DDS_STEPS - step;
      amp = sine_table[step];
      if ((phase & (2*DDS_STEPS)))
          amp = -amp;
      return amp;
  }
  /*- End of function --------------------------------------------------------*/

  SPAN_DECLARE(int16_t) dds_offset(uint32_t phase_acc, int32_t phase_offset)
  {
      return dds_lookup(phase_acc + phase_offset);
  }
  /*- End of function --------------------------------------------------------*/

  SPAN_DECLARE(void) dds_advance(uint32_t *phase_acc, int32_t phase_rate)
  {
      *phase_acc += phase_rate;
  }
  /*- End of function --------------------------------------------------------*/

  SPAN_DECLARE(int16_t) dds(uint32_t *phase_acc, int32_t phase_rate)
  {
      int16_t amp;

      amp = dds_lookup(*phase_acc);
      *phase_acc += phase_rate;
      return amp;
  }
  /*- End of function --------------------------------------------------------*/

  SPAN_DECLARE(int16_t) dds_mod(uint32_t *phase_acc, int32_t phase_rate, int16_t scale, int32_t phase)
  {
      int16_t amp;

      amp = (int16_t) (((int32_t) dds_lookup(*phase_acc + phase)*scale) >> 15);
      *phase_acc += phase_rate;
      return amp;
  }
  /*- End of function --------------------------------------------------------*/

#+END_SRC

- dds_lookup
  给定相位值，查找正弦值表中对应的值。
  首先通过移位，保留 SLENK + 2 位，其中低 SLENK 位用来对应正弦值表数组项的值，高 2 位决定象限。

- dds
  返回当前相位 phase_acc 的幅度值，并将当前相位增加一个采样的相位差。

- dds_mod
  返回当前相位 phase_acc 经过 phase 相位调制和 scale 幅度调制后的幅度值。并将当前相位增加一个采样的相位差。


** src/dds_float.c

FLOAT 音频数据格式，信号幅度值域 [ -1.0, 1.0 ] 。

#+BEGIN_SRC c -n
  #define SLENK       11
  #define SINELEN     (1 << SLENK)

  /* Precreating this table allows it to be in const memory, which might
     have some performance advantage. */
  static const float sine_table[SINELEN] =
  {
       0.00000000f,
       0.00306796f,
       0.00613588f,
  ...
       0.99998118f,
       0.99999529f,
       1.00000000f,
       0.99999529f,
       0.99998118f,
  ...
       0.00613588f,
       0.00306796f,
       0.00000000f,
      -0.00306796f,
      -0.00613588f,
  ...
      -0.99998118f,
      -0.99999529f,
      -1.00000000f,
      -0.99999529f,
      -0.99998118f,
  ....
      -0.00920375f,
      -0.00613588f,
      -0.00306796f
  };
#+END_SRC

- SLENK
  正弦值表数组大小的二进制位数。

- SINELEN
  正弦值数组大小。

#+BEGIN_SRC c -n
  SPAN_DECLARE(float) dds_phase_to_radians(uint32_t phase)
  {
      return phase*2.0f*3.1415926f/(65536.0f*65536.0f);
  }
  /*- End of function --------------------------------------------------------*/

  SPAN_DECLARE(int32_t) dds_phase_ratef(float frequency)
  {
      return (int32_t) (frequency*65536.0f*65536.0f/SAMPLE_RATE);
  }
  /*- End of function --------------------------------------------------------*/

  SPAN_DECLARE(float) dds_frequencyf(int32_t phase_rate)
  {
      return (float) phase_rate*(float) SAMPLE_RATE/(65536.0f*65536.0f);
  }
  /*- End of function --------------------------------------------------------*/

#+END_SRC

- dds_phase_ratef
  给定频率下，计算采样点间的相位差，以波形为单位，乘以 65536.0 * 65536.0 ，是为了在整型表示下保持精度。

- dds_frequency
  给定采样点相位差，计算所需的频率。

#+BEGIN_SRC c -n
  SPAN_DECLARE(float) dds_scaling_dbm0f(float level)
  {
      return powf(10.0f, (level - DBM0_MAX_SINE_POWER)/20.0f)*32767.0f;
  }
  /*- End of function --------------------------------------------------------*/

  SPAN_DECLARE(float) dds_scaling_dbovf(float level)
  {
      return powf(10.0f, (level - DBOV_MAX_SINE_POWER)/20.0f)*32767.0f;
  }
  /*- End of function --------------------------------------------------------*/

#+END_SRC

计算给定分贝水平值对应的信号放大倍数。

#+BEGIN_SRC c -n
  SPAN_DECLARE(void) dds_advancef(uint32_t *phase_acc, int32_t phase_rate)
  {
      ,*phase_acc += phase_rate;
  }
  /*- End of function --------------------------------------------------------*/

  SPAN_DECLARE(float) ddsf(uint32_t *phase_acc, int32_t phase_rate)
  {
      float amp;

      amp = sine_table[*phase_acc >> (32 - SLENK)];
      ,*phase_acc += phase_rate;
      return amp;
  }
  /*- End of function --------------------------------------------------------*/

  SPAN_DECLARE(float) dds_lookupf(uint32_t phase)
  {
      return sine_table[phase >> (32 - SLENK)];
  }
  /*- End of function --------------------------------------------------------*/

  SPAN_DECLARE(float) dds_modf(uint32_t *phase_acc, int32_t phase_rate, float scale, int32_t phase)
  {
      float amp;

      amp = sine_table[*(phase_acc + phase) >> (32 - SLENK)]*scale;
      ,*phase_acc += phase_rate;
      return amp;
  }
  /*- End of function --------------------------------------------------------*/

#+END_SRC

** src/spandsp/fsk.h
#+BEGIN_SRC c -n
  /*!
      FSK modem specification. This defines the frequencies, signal levels and
      baud rate (== bit rate for simple FSK) for a single channel of an FSK modem.
  ,*/
  typedef struct
  {
      /*! Short text name for the modem. */
      const char *name;
      /*! The frequency of the zero bit state, in Hz */
      int freq_zero;
      /*! The frequency of the one bit state, in Hz */
      int freq_one;
      /*! The transmit power level, in dBm0 */
      int tx_level;
      /*! The minimum acceptable receive power level, in dBm0 */
      int min_level;
      /*! The bit rate of the modem, in units of 1/100th bps */
      int baud_rate;
  } fsk_spec_t;

#+END_SRC

** src/spandsp/private/fsk.h
#+BEGIN_SRC c -n
  /*!
      FSK modem transmit descriptor. This defines the state of a single working
      instance of an FSK modem transmitter.
  ,*/
  struct fsk_tx_state_s
  {
      int baud_rate;
      /*! \brief The callback function used to get the next bit to be transmitted. */
      get_bit_func_t get_bit;
      /*! \brief A user specified opaque pointer passed to the get_bit function. */
      void *get_bit_user_data;

      /*! \brief The callback function used to report modem status changes. */
      modem_tx_status_func_t status_handler;
      /*! \brief A user specified opaque pointer passed to the status function. */
      void *status_user_data;

      int32_t phase_rates[2];
      int16_t scaling;
      int32_t current_phase_rate;
      uint32_t phase_acc;
      int baud_frac;
      int shutdown;
  };

  /*!
      FSK modem receive descriptor. This defines the state of a single working
      instance of an FSK modem receiver.
  ,*/
  struct fsk_rx_state_s
  {
      int baud_rate;
      /*! \brief Synchronous/asynchronous framing control */
      int framing_mode;
      /*! \brief The callback function used to put each bit received. */
      put_bit_func_t put_bit;
      /*! \brief A user specified opaque pointer passed to the put_bit routine. */
      void *put_bit_user_data;

      /*! \brief The callback function used to report modem status changes. */
      modem_tx_status_func_t status_handler;
      /*! \brief A user specified opaque pointer passed to the status function. */
      void *status_user_data;

      int32_t carrier_on_power;
      int32_t carrier_off_power;
      power_meter_t power;
      /*! \brief The value of the last signal sample, using the a simple HPF for signal power estimation. */
      int16_t last_sample;
      /*! \brief >0 if a signal above the minimum is present. It may or may not be a V.29 signal. */
      int signal_present;

      int32_t phase_rate[2];
      uint32_t phase_acc[2];

      int correlation_span;

      complexi32_t window[2][FSK_MAX_WINDOW_LEN];
      complexi32_t dot[2];
      int buf_ptr;

      int frame_state;
      int frame_bits;
      int baud_phase;
      int last_bit;
      int scaling_shift;
  };

#+END_SRC

** src/fsk.c
#+BEGIN_SRC c -n
  SPAN_DECLARE(int) fsk_tx_restart(fsk_tx_state_t *s, const fsk_spec_t *spec)
  {
      s->baud_rate = spec->baud_rate;
      s->phase_rates[0] = dds_phase_rate((float) spec->freq_zero);
      s->phase_rates[1] = dds_phase_rate((float) spec->freq_one);
      s->scaling = dds_scaling_dbm0((float) spec->tx_level);
      /* Initialise fractional sample baud generation. */
      s->phase_acc = 0;
      s->baud_frac = 0;
      s->current_phase_rate = s->phase_rates[1];

      s->shutdown = FALSE;
      return 0;
  }
  /*- End of function --------------------------------------------------------*/

  SPAN_DECLARE(fsk_tx_state_t *) fsk_tx_init(fsk_tx_state_t *s,
                                             const fsk_spec_t *spec,
                                             get_bit_func_t get_bit,
                                             void *user_data)
  {
      if (s == NULL)
      {
          if ((s = (fsk_tx_state_t *) malloc(sizeof(*s))) == NULL)
              return NULL;
      }
      memset(s, 0, sizeof(*s));

      s->get_bit = get_bit;
      s->get_bit_user_data = user_data;
      fsk_tx_restart(s, spec);
      return s;
  }
  /*- End of function --------------------------------------------------------*/

#+END_SRC

#+BEGIN_SRC c -n -r
  SPAN_DECLARE_NONSTD(int) fsk_tx(fsk_tx_state_t *s, int16_t amp[], int len)
  {
      int sample;
      int bit;

      if (s->shutdown)
          return 0;
      /* Make the transitions between 0 and 1 phase coherent, but instantaneous
         jumps. There is currently no interpolation for bauds that end mid-sample.
         Mainstream users will not care. Some specialist users might have a problem
         with them, if they care about accurate transition timing. */
      for (sample = 0;  sample < len;  sample++)
      {
          if ((s->baud_frac += s->baud_rate) >= SAMPLE_RATE*100) (ref:samples_per_baud)
          {
              s->baud_frac -= SAMPLE_RATE*100;
              if ((bit = s->get_bit(s->get_bit_user_data)) == SIG_STATUS_END_OF_DATA) (ref:get_bit)
              {
                  if (s->status_handler)
                      s->status_handler(s->status_user_data, SIG_STATUS_END_OF_DATA);
                  if (s->status_handler)
                      s->status_handler(s->status_user_data, SIG_STATUS_SHUTDOWN_COMPLETE);
                  s->shutdown = TRUE;
                  break;
              }
              s->current_phase_rate = s->phase_rates[bit & 1];
          }
          amp[sample] = dds_mod(&s->phase_acc, s->current_phase_rate, s->scaling, 0); (ref:phase_coherent)
      }
      return sample;
  }
  /*- End of function --------------------------------------------------------*/

#+END_SRC

- fsk_tx
  调制数据，最多 len 个采样，结果写入至 amp 数组。
  过程中，从 get_bit 回调中取得需要调制的数据。[[(get_bit)]]
  信号变化周期的采样数为采样频率（ sample_rate ）除以波特率（ baud ）： $n = S/B$ ，即 $n \times B = S$。[[(samples_per_baud)]]
  这里使用相位连续调制，所以对所有频率都采用同一个参考值 phase_acc ，并不因调制频率不同而突变。[[(phase_coherent)]]

#+BEGIN_SRC c -n
  SPAN_DECLARE(int) fsk_rx_restart(fsk_rx_state_t *s, const fsk_spec_t *spec, int framing_mode)
  {
      int chop;

      s->baud_rate = spec->baud_rate;
      s->framing_mode = framing_mode;
      fsk_rx_signal_cutoff(s, (float) spec->min_level);

      /* Detect by correlating against the tones we want, over a period
         of one baud. The correlation must be quadrature. */

      /* First we need the quadrature tone generators to correlate
         against. */
      s->phase_rate[0] = dds_phase_rate((float) spec->freq_zero);
      s->phase_rate[1] = dds_phase_rate((float) spec->freq_one);
      s->phase_acc[0] = 0;
      s->phase_acc[1] = 0;
      s->last_sample = 0;

      /* The correlation should be over one baud. */
      s->correlation_span = SAMPLE_RATE*100/spec->baud_rate;
      /* But limit it for very slow baud rates, so we do not overflow our
         buffer. */
      if (s->correlation_span > FSK_MAX_WINDOW_LEN)
          s->correlation_span = FSK_MAX_WINDOW_LEN;

      /* We need to scale, to avoid overflow in the correlation. */
      s->scaling_shift = 0;
      chop = s->correlation_span;
      while (chop != 0)
      {
          s->scaling_shift++;
          chop >>= 1;
      }

      /* Initialise the baud/bit rate tracking. */
      s->baud_phase = 0;
      s->frame_state = 0;
      s->frame_bits = 0;
      s->last_bit = 0;

      /* Initialise a power detector, so sense when a signal is present. */
      power_meter_init(&s->power, 4);
      s->signal_present = 0;
      return 0;
  }
  /*- End of function --------------------------------------------------------*/

  SPAN_DECLARE(fsk_rx_state_t *) fsk_rx_init(fsk_rx_state_t *s,
                                             const fsk_spec_t *spec,
                                             int framing_mode,
                                             put_bit_func_t put_bit,
                                             void *user_data)
  {
      if (s == NULL)
      {
          if ((s = (fsk_rx_state_t *) malloc(sizeof(*s))) == NULL)
              return NULL;
      }
      memset(s, 0, sizeof(*s));

      s->put_bit = put_bit;
      s->put_bit_user_data = user_data;
      fsk_rx_restart(s, spec, framing_mode);
      return s;
  }
  /*- End of function --------------------------------------------------------*/

#+END_SRC

#+BEGIN_SRC c -n
  SPAN_DECLARE_NONSTD(int) fsk_rx(fsk_rx_state_t *s, const int16_t *amp, int len)
  {
      int buf_ptr;
      int baudstate;
      int i;
      int j;
      int16_t x;
      int32_t dot;
      int32_t sum[2];
      int32_t power;
      complexi_t ph;

      buf_ptr = s->buf_ptr;

      for (i = 0;  i < len;  i++)
      {
          /* The *totally* asynchronous character to character behaviour of these
             modems, when carrying async. data, seems to force a sample by sample
             approach. */
          for (j = 0;  j < 2;  j++)
          {
              s->dot[j].re -= s->window[j][buf_ptr].re;
              s->dot[j].im -= s->window[j][buf_ptr].im;

              ph = dds_complexi(&s->phase_acc[j], s->phase_rate[j]);
              s->window[j][buf_ptr].re = (ph.re*amp[i]) >> s->scaling_shift;
              s->window[j][buf_ptr].im = (ph.im*amp[i]) >> s->scaling_shift;

              s->dot[j].re += s->window[j][buf_ptr].re;
              s->dot[j].im += s->window[j][buf_ptr].im;

              dot = s->dot[j].re >> 15;
              sum[j] = dot*dot;
              dot = s->dot[j].im >> 15;
              sum[j] += dot*dot;
          }
          /* If there isn't much signal, don't demodulate - it will only produce
             useless junk results. */
          /* There should be no DC in the signal, but sometimes there is.
             We need to measure the power with the DC blocked, but not using
             a slow to respond DC blocker. Use the most elementary HPF. */
          x = amp[i] >> 1;
          power = power_meter_update(&s->power, x - s->last_sample);
          s->last_sample = x;
          if (s->signal_present)
          {
              /* Look for power below turn-off threshold to turn the carrier off */
              if (power < s->carrier_off_power)
              {
                  if (--s->signal_present <= 0)
                  {
                      /* Count down a short delay, to ensure we push the last
                         few bits through the filters before stopping. */
                      report_status_change(s, SIG_STATUS_CARRIER_DOWN);
                      s->baud_phase = 0;
                      continue;
                  }
              }
          }
          else
          {
              /* Look for power exceeding turn-on threshold to turn the carrier on */
              if (power < s->carrier_on_power)
              {
                  s->baud_phase = 0;
                  continue;
              }
              if (s->baud_phase < (s->correlation_span >> 1) - 30)
              {
                  s->baud_phase++;
                  continue;
              }
              s->signal_present = 1;
              /* Initialise the baud/bit rate tracking. */
              s->baud_phase = 0;
              s->frame_state = 0;
              s->frame_bits = 0;
              s->last_bit = 0;
              report_status_change(s, SIG_STATUS_CARRIER_UP);
          }
          /* Non-coherent FSK demodulation by correlation with the target tones
             over a one baud interval. The slow V.xx specs. are too open ended
             to allow anything fancier to be used. The dot products are calculated
             using a sliding window approach, so the compute load is not that great. */

          baudstate = (sum[0] < sum[1]);
          switch (s->framing_mode)
          {
          case FSK_FRAME_MODE_SYNC:
              /* Synchronous serial operation - e.g. for HDLC */
              if (s->last_bit != baudstate)
              {
                  /* On a transition we check our timing */
                  s->last_bit = baudstate;
                  /* For synchronous use (e.g. HDLC channels in FAX modems), nudge
                     the baud phase gently, trying to keep it centred on the bauds. */
                  if (s->baud_phase < (SAMPLE_RATE*50))
                      s->baud_phase += (s->baud_rate >> 3);
                  else
                      s->baud_phase -= (s->baud_rate >> 3);
              }
              if ((s->baud_phase += s->baud_rate) >= (SAMPLE_RATE*100))
              {
                  /* We should be in the middle of a baud now, so report the current
                     state as the next bit */
                  s->baud_phase -= (SAMPLE_RATE*100);
                  s->put_bit(s->put_bit_user_data, baudstate);
              }
              break;
          case FSK_FRAME_MODE_ASYNC:
              /* Fully asynchronous mode */
              if (s->last_bit != baudstate)
              {
                  /* On a transition we check our timing */
                  s->last_bit = baudstate;
                  /* For async. operation, believe transitions completely, and
                     sample appropriately. This allows instant start on the first
                     transition. */
                  /* We must now be about half way to a sampling point. We do not do
                     any fractional sample estimation of the transitions, so this is
                     the most accurate baud alignment we can do. */
                  s->baud_phase = SAMPLE_RATE*50;
              }
              if ((s->baud_phase += s->baud_rate) >= (SAMPLE_RATE*100))
              {
                  /* We should be in the middle of a baud now, so report the current
                     state as the next bit */
                  s->baud_phase -= (SAMPLE_RATE*100);
                  s->put_bit(s->put_bit_user_data, baudstate);
              }
              break;
          case FSK_FRAME_MODE_5N1_FRAMES:
          case FSK_FRAME_MODE_7N1_FRAMES:
          case FSK_FRAME_MODE_7E1_FRAMES:
          case FSK_FRAME_MODE_7E2_FRAMES:
          default:
              /* Gather the specified number of bits, with robust checking to ensure reasonable voice immunity.
                 The first bit should be a start bit (0), and the last bit should be a stop bit (1) */
              if (s->frame_state == 0)
              {
                  /* Looking for the start of a zero bit, which hopefully the start of a start bit */
                  if (baudstate == 0)
                  {
                      s->baud_phase = SAMPLE_RATE*(100 - 40)/2;
                      s->frame_state = -1;
                      s->frame_bits = 0;
                      s->last_bit = -1;
                  }
              }
              else if (s->frame_state == -1)
              {
                  /* Look for a continuous zero from the start of the start bit until
                     beyond the middle */
                  if (baudstate != 0)
                  {
                      /* If we aren't looking at a stable start bit, restart */
                      s->frame_state = 0;
                  }
                  else
                  {
                      s->baud_phase += s->baud_rate;
                      if (s->baud_phase >= SAMPLE_RATE*100)
                      {
                          s->frame_state = 1;
                          s->last_bit = baudstate;
                      }
                  }
              }
              else
              {
                  s->baud_phase += s->baud_rate;
                  if (s->baud_phase >= SAMPLE_RATE*(100 - 40))
                  {
                      if (s->last_bit < 0)
                          s->last_bit = baudstate;
                      /* Look for the bit being consistent over the central 20% of the bit time. */
                      if (s->last_bit != baudstate)
                      {
                          s->frame_state = 0;
                      }
                      else if (s->baud_phase >= SAMPLE_RATE*100)
                      {
                          /* We should be in the middle of a baud now, so report the current
                             state as the next bit */
                          if (s->last_bit == baudstate)
                          {
                              if (++s->frame_state > s->framing_mode)
                              {
                                  /* Check we have a stop bit and a start bit */
                                  if (baudstate == 1  &&  (s->frame_bits & 0x02) == 0)
                                  {
                                      /* Drop the start bit, and pass the rest back */
                                      s->put_bit(s->put_bit_user_data, s->frame_bits >> 2);
                                  }
                                  s->frame_state = 0;
                              }
                              else
                              {
                                  s->frame_bits |= (baudstate << s->framing_mode);
                                  s->frame_bits >>= 1;
                              }
                              s->baud_phase -= (SAMPLE_RATE*100);
                          }
                          else
                          {
                              s->frame_state = 0;
                          }
                          s->last_bit = -1;
                      }
                  }
              }
              break;
          }
          if (++buf_ptr >= s->correlation_span)
              buf_ptr = 0;
      }
      s->buf_ptr = buf_ptr;
      return 0;
  }
  /*- End of function --------------------------------------------------------*/

#+END_SRC
